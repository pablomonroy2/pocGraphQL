package {{package}}.client

import io.ktor.client.*
import io.ktor.client.features.*
import io.ktor.client.request.*
import org.springframework.stereotype.Component

@Component
class KtorClient(private val client: HttpClient) {

    suspend fun get(id:Long):String = runCatching {
        client.get<String>(path = "any/$id")
    }.onFailure {
            exception ->
        if (exception is RedirectResponseException)
            when(exception){
                is RedirectResponseException -> {/*Status codes 3XX*/}
                is ClientRequestException -> {/*status codes 4XX*/ }
                is ServerResponseException -> {/*status codes 5XX*/}
            }
    }.getOrThrow()

    suspend fun post(id:Long):String = runCatching {
        client.post<String>(path = "any", body = mapOf("id" to id))
    }.onFailure {
            exception ->
        if (exception is RedirectResponseException)
            when(exception){
                is RedirectResponseException -> {/*Status codes 3XX*/}
                is ClientRequestException -> {/*status codes 4XX*/ }
                is ServerResponseException -> {/*status codes 5XX*/}
            }
    }.getOrThrow()

}